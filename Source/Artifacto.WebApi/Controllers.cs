//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using FileParameter = Microsoft.AspNetCore.Http.IFormFile;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Artifacto.WebApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IProjectsController
    {

        /// <summary>
        /// List all projects
        /// </summary>

        /// <remarks>
        /// Retrieves a list of all projects.
        /// </remarks>

        /// <returns>List of projects retrieved successfully.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ProjectsGetResponse>>> GetProjectsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new project
        /// </summary>

        /// <remarks>
        /// Creates a new project with the provided details.
        /// </remarks>

        /// <param name="body">Project to create</param>

        /// <returns>Project created successfully.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ProjectPostResponse>> PostProjectAsync(ProjectPostRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get project details
        /// </summary>

        /// <remarks>
        /// Retrieves project details by projectId.
        /// </remarks>

        /// <returns>Project details retrieved successfully.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ProjectGetResponse>> GetProjectAsync(string projectKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a project
        /// </summary>

        /// <remarks>
        /// Updates an existing project's details.
        /// </remarks>

        /// <param name="body">Updated project information</param>


        /// <returns>Project updated successfully.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> PutProjectAsync(ProjectPutRequest body, string projectKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a project
        /// </summary>

        /// <remarks>
        /// Deletes a project by projectId.
        /// </remarks>

        /// <returns>Project deleted successfully.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteProjectAsync(string projectKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class ProjectsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IProjectsController _implementation;

        public ProjectsController(IProjectsController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// List all projects
        /// </summary>
        /// <remarks>
        /// Retrieves a list of all projects.
        /// </remarks>
        /// <returns>List of projects retrieved successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("projects", Name = "GetProjects")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ProjectsGetResponse>>> GetProjects(System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.GetProjectsAsync(cancellationToken);
        }

        /// <summary>
        /// Create a new project
        /// </summary>
        /// <remarks>
        /// Creates a new project with the provided details.
        /// </remarks>
        /// <param name="body">Project to create</param>
        /// <returns>Project created successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("projects", Name = "PostProject")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ProjectPostResponse>> PostProject([Microsoft.AspNetCore.Mvc.FromBody] ProjectPostRequest body, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.PostProjectAsync(body, cancellationToken);
        }

        /// <summary>
        /// Get project details
        /// </summary>
        /// <remarks>
        /// Retrieves project details by projectId.
        /// </remarks>
        /// <returns>Project details retrieved successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("projects/{projectKey}", Name = "GetProject")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ProjectGetResponse>> GetProject(string projectKey, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.GetProjectAsync(projectKey, cancellationToken);
        }

        /// <summary>
        /// Update a project
        /// </summary>
        /// <remarks>
        /// Updates an existing project's details.
        /// </remarks>
        /// <param name="body">Updated project information</param>
        /// <returns>Project updated successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("projects/{projectKey}", Name = "PutProject")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> PutProject([Microsoft.AspNetCore.Mvc.FromBody] ProjectPutRequest body, string projectKey, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.PutProjectAsync(body, projectKey, cancellationToken);
        }

        /// <summary>
        /// Delete a project
        /// </summary>
        /// <remarks>
        /// Deletes a project by projectId.
        /// </remarks>
        /// <returns>Project deleted successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("projects/{projectKey}", Name = "DeleteProject")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteProject(string projectKey, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.DeleteProjectAsync(projectKey, cancellationToken);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IArtifactsController
    {

        /// <summary>
        /// List artifacts in a project
        /// </summary>

        /// <remarks>
        /// Retrieves a list of artifacts for the given project.
        /// </remarks>

        /// <returns>List of artifacts retrieved successfully.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ProjectArtifactsGetResponse>>> GetProjectArtifactsAsync(string projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get artifact details
        /// </summary>

        /// <remarks>
        /// Retrieves details of a specific artifact.
        /// </remarks>



        /// <returns>Artifact details retrieved successfully.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ArtifactGetResponse>> GetArtifactAsync(string projectKey, string artifactVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an artifact
        /// </summary>

        /// <remarks>
        /// Updates an existing artifact's details.
        /// </remarks>

        /// <param name="body">Updated artifact data</param>


        /// <returns>Artifact updated successfully.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> PutArtifactAsync(ArtifactPutRequest body, string projectKey, string artifactVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an artifact
        /// </summary>

        /// <remarks>
        /// Deletes a specific artifact from a project.
        /// </remarks>



        /// <returns>Artifact deleted successfully.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteArtifactAsync(string projectKey, string artifactVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Upload a new artifact
        /// </summary>

        /// <remarks>
        /// Uploads a new artifact for a specific project.
        /// </remarks>



        /// <param name="file">The artifact file to upload.</param>

        /// <returns>Artifact uploaded successfully.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ArtifactPostResponse>> PostArtifactAsync(string projectKey, string artifactVersion, FileParameter file, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download an artifact
        /// </summary>

        /// <remarks>
        /// Retrieves the binary content of the specified artifact.
        /// </remarks>



        /// <returns>Artifact downloaded successfully.</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DownloadArtifactAsync(string projectKey, string artifactVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class ArtifactsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IArtifactsController _implementation;

        public ArtifactsController(IArtifactsController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// List artifacts in a project
        /// </summary>
        /// <remarks>
        /// Retrieves a list of artifacts for the given project.
        /// </remarks>
        /// <returns>List of artifacts retrieved successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("projects/{projectId}/artifacts", Name = "GetProjectArtifacts")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<ProjectArtifactsGetResponse>>> GetProjectArtifacts(string projectId, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.GetProjectArtifactsAsync(projectId, cancellationToken);
        }

        /// <summary>
        /// Get artifact details
        /// </summary>
        /// <remarks>
        /// Retrieves details of a specific artifact.
        /// </remarks>
        /// <returns>Artifact details retrieved successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("projects/{projectKey}/artifacts/{artifactVersion}", Name = "GetArtifact")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ArtifactGetResponse>> GetArtifact(string projectKey, string artifactVersion, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.GetArtifactAsync(projectKey, artifactVersion, cancellationToken);
        }

        /// <summary>
        /// Update an artifact
        /// </summary>
        /// <remarks>
        /// Updates an existing artifact's details.
        /// </remarks>
        /// <param name="body">Updated artifact data</param>
        /// <returns>Artifact updated successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("projects/{projectKey}/artifacts/{artifactVersion}", Name = "PutArtifact")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> PutArtifact([Microsoft.AspNetCore.Mvc.FromBody] ArtifactPutRequest body, string projectKey, string artifactVersion, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.PutArtifactAsync(body, projectKey, artifactVersion, cancellationToken);
        }

        /// <summary>
        /// Delete an artifact
        /// </summary>
        /// <remarks>
        /// Deletes a specific artifact from a project.
        /// </remarks>
        /// <returns>Artifact deleted successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("projects/{projectKey}/artifacts/{artifactVersion}", Name = "DeleteArtifact")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteArtifact(string projectKey, string artifactVersion, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.DeleteArtifactAsync(projectKey, artifactVersion, cancellationToken);
        }

        /// <summary>
        /// Upload a new artifact
        /// </summary>
        /// <remarks>
        /// Uploads a new artifact for a specific project.
        /// </remarks>
        /// <param name="file">The artifact file to upload.</param>
        /// <returns>Artifact uploaded successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("projects/{projectKey}/artifacts/{artifactVersion}", Name = "PostArtifact")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ArtifactPostResponse>> PostArtifact(string projectKey, string artifactVersion, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.PostArtifactAsync(projectKey, artifactVersion, file, cancellationToken);
        }

        /// <summary>
        /// Download an artifact
        /// </summary>
        /// <remarks>
        /// Retrieves the binary content of the specified artifact.
        /// </remarks>
        /// <returns>Artifact downloaded successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("projects/{projectKey}/artifacts/{artifactVersion}/download", Name = "DownloadArtifact")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DownloadArtifact(string projectKey, string artifactVersion, System.Threading.CancellationToken cancellationToken)
        {

            return _implementation.DownloadArtifactAsync(projectKey, artifactVersion, cancellationToken);
        }

    }

    /// <summary>
    /// Error response details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse
    {
        /// <summary>
        /// Error message.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string? Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Project details for listing projects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectsGetResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string? Key { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Number of artifacts in this project.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("artifactCount")]
        public int? ArtifactCount { get; set; } = default!;

        /// <summary>
        /// Latest stable (non-prerelease) version of artifacts in this project.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latestStableVersion")]
        public string? LatestStableVersion { get; set; } = default!;

        /// <summary>
        /// Latest version (including prerelease) of artifacts in this project.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latestVersion")]
        public string? LatestVersion { get; set; } = default!;

        /// <summary>
        /// Upload date of the latest stable version, if available.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latestStableVersionUploadDate")]
        public System.DateTimeOffset? LatestStableVersionUploadDate { get; set; } = default!;

        /// <summary>
        /// Upload date of the latest version, if available.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latestVersionUploadDate")]
        public System.DateTimeOffset? LatestVersionUploadDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectPostRequest
    {
        /// <summary>
        /// Unique project identifier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-z0-9]+(-?[a-z0-9]+)*$")]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Human-readable project name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Project description.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response with project details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectGetResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string? Key { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        /// <summary>
        /// Latest stable (non-prerelease) version of artifacts in this project.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latestStableVersion")]
        public string? LatestStableVersion { get; set; } = default!;

        /// <summary>
        /// Latest version (including prerelease) of artifacts in this project.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latestVersion")]
        public string? LatestVersion { get; set; } = default!;

        /// <summary>
        /// Upload date of the latest stable version, if available.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latestStableVersionUploadDate")]
        public System.DateTimeOffset? LatestStableVersionUploadDate { get; set; } = default!;

        /// <summary>
        /// Upload date of the latest version, if available.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("latestVersionUploadDate")]
        public System.DateTimeOffset? LatestVersionUploadDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectPutRequest
    {
        /// <summary>
        /// Unique project identifier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[a-z0-9]+(-?[a-z0-9]+)*$")]
        public string Key { get; set; } = default!;

        /// <summary>
        /// Human-readable project name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        /// <summary>
        /// Project description.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Artifact details for listing artifacts.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectArtifactsGetResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("projectKey")]
        public string? ProjectKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public string? Version { get; set; } = default!;

        /// <summary>
        /// Timestamp of creation or last modification.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        public System.DateTimeOffset? Timestamp { get; set; } = default!;

        /// <summary>
        /// Name of the artifact file.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]
        public string? FileName { get; set; } = default!;

        /// <summary>
        /// Size of the artifact file in bytes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileSizeBytes")]
        public long? FileSizeBytes { get; set; } = default!;

        /// <summary>
        /// SHA256 hash of the artifact file.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sha256Hash")]
        public string? Sha256Hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retained")]
        public bool? Retained { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locked")]
        public bool? Locked { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArtifactPostRequest
    {
        /// <summary>
        /// The artifact file to upload.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("file")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] File { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response with artifact details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArtifactGetResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("projectKey")]
        public string? ProjectKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public string? Version { get; set; } = default!;

        /// <summary>
        /// Artifact timestamp.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        public System.DateTimeOffset? Timestamp { get; set; } = default!;

        /// <summary>
        /// Name of the uploaded artifact file.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]
        public string? FileName { get; set; } = default!;

        /// <summary>
        /// Size of the uploaded artifact file in bytes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileSizeBytes")]
        public long? FileSizeBytes { get; set; } = default!;

        /// <summary>
        /// SHA256 hash of the artifact file.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sha256Hash")]
        public string? Sha256Hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retained")]
        public bool? Retained { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locked")]
        public bool? Locked { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArtifactPutRequest
    {
        /// <summary>
        /// Artifact version identifier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Version { get; set; } = default!;

        /// <summary>
        /// If the artifact should be retained indefinitely.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("retained")]
        public bool? Retained { get; set; } = false;

        /// <summary>
        /// If the artifact is locked for modifications.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("locked")]
        public bool? Locked { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response when a project is created.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectPostResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string? Key { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response when an artifact is uploaded.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ArtifactPostResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("projectKey")]
        public string? ProjectKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public string? Version { get; set; } = default!;

        /// <summary>
        /// Artifact timestamp.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        public System.DateTimeOffset? Timestamp { get; set; } = default!;

        /// <summary>
        /// Name of the uploaded artifact file.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]
        public string? FileName { get; set; } = default!;

        /// <summary>
        /// Size of the uploaded artifact file in bytes.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileSizeBytes")]
        public long? FileSizeBytes { get; set; } = default!;

        /// <summary>
        /// SHA256 hash of the artifact file.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sha256Hash")]
        public string? Sha256Hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("retained")]
        public bool? Retained { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locked")]
        public bool? Locked { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }



}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625